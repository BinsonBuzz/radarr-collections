# Library for written output
#
# To customise your logging and results files, feel free to change any of the text
# Changing any of the {#} or ${word} variables WILL cause errors.

[help]
text = 	rcm.py <option>
	
	Options:
       	| Short    | Long           | Use
       	|----------|----------------|---------
        | -h       | --help         |  Displays this help.
        | -f       | --full         |  Repeat initial scan - recheck all movies.
        | -s <num> | --start <num>  |  Specify start point - useful for big libraries if errors occur. (forces -f)
        | -t <num> | --tmdbid <num> |  Check single TMDB ID for Collections.
        | -d       | --down         |  Ignore Wanted list - only search movies with files.
        | -p       | --people       |  Disable all Collection scanning - only scan People.
        | -q       | --quiet        |  Disables verbose logging in command line. Log file still created.
        | -n       | --nolog        |  Disables log file creation - verbose logging still visible.
        | -c       | --cache        |  Disables automatic adding to Radarr - instead saves list of missing movies to text file.
        | -a       | --art          |  Saves list of Collection artwork URLs to text file.

[text]
name = Radarr Collection and People Manager by u/RhinoRhys
hello = Welcome to ${name}

error = Error - 
exit = - Exiting

start_err = $(error} Start point {0} greater that data length {1} ${exit}
template_err = Profile template for People Monitoring ${error}
int_err = Not a valid TMDB ID number ${exit}
prof_err = TMDB ID not in database ${exit}
tp_err = ${error} t and p options not compatible ${exit}

peeps = People only mode: Ignoring Collections

run_mov_mon = Checking {0} Movies
run_col_mon = Checking {1} existing Collections
run_per_mon = Checking {2} monitored People

single = Scanning:

dent = ---> 
full = Running full scan:
	${dent} ${run_mov_mon}
	${dent} ${run_per_mon}
     
update = Running update scan:
	${dent} ${run_mov_mon}
	${dent} ${run_col_mon}
	${dent} ${run_per_mon} 

wanted = Ignore wanted list active: only checking Movies with files
art = Collection Artwork URLs file will be created
cache = Auto adding disabled: saving results to file
start = Start point specified: skipping {0} items

api_auth = Unauthorized - Please check your {0} API key
api_wait = >>> Too many requests - waiting {0} seconds <<<
api_misc = >>> Unplanned error from {0} API, return code: {1} - Retrying, attempt {2} <<<

radarr = Radarr ID: {0}
mov_info = {1} TMDB ID: {2}{3}{4} ({5}){6}

stage_info = {0}{1}{2} (ID: {3})
other = ${stage_info}: {4} Movies in collection:
person = ${stage_info}: Monitoring: {4}

no_col = None
in_col = In Collection
col_err = Error - Not Found
skip = Skipping
 
in_data  = >>    ${radarr}${mov_info}In Library
not_data = >>    {0}${mov_info}Missing
ignore = >>    {0}${mov_info}Blacklisted
rated = >>    {0}${mov_info}Rating Too Low
found = {0}{1} TMDB ID: {2}{3}{4} ({5})
col_art = {0}{1} https://image.tmdb.org/t/p/original{2}

cast = >>    Appeared in {0} Movies:
crew = >>    Credited for {0} on {1} Movies:

add_true = >>>                        {0}${dent} Added sucessfully
add_fail = >>>                        {0}${dent} Failed to add [Response Code: {1}]

exiting = %{ex} at item {1}
api_retry = {0} API Error - Retry limit reached$ - {exiting}
offline = Error {0} offline ${exiting}
retry_err = Too many errors adding to Radarr - Switching to caching mode

found_open = Total Movies Found: {0}
found_start = From Collections: {1}
found_middle = From People: {2}

auto_cache = Too many errors adding to Radarr, found_{0}.txt has been saved in the output folder instead
bye = Found {0} Movies
	
	Thank You for using ${name}


